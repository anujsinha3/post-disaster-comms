[project]
name = "post-disaster-comms"
version = "0.1.0"
description = "post-disaster communications project"
authors = ["Don Setiawan"]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64"]

[environments]
frontend = ["frontend"]
backend = ["backend", "db"]
deployment = ["cloud", "backup-secret"]

[dependencies]
go-sops = ">=3.9.0"

# ==== Backend Database environment ====
[feature.db.dependencies]
python = ">=3.10"
pip = "*"

[feature.db.pypi-dependencies]
support-sphere-py = { path = "./src/support_sphere_py", editable = true }

[feature.db.tasks]
setup-db-data-via-k8s-job = { depends-on = [
    "build-docker-image-for-api-service",
    "import-docker-image-in-k8s-cluster",
    "create-configmap",
    "run-container-job"
]}

[feature.db.tasks.build-docker-image-for-api-service]
cmd = "docker build -t pdc/populate_db:1.0 -f deployment/docker/populate_db.Dockerfile_dev ."

[feature.db.tasks.import-docker-image-in-k8s-cluster]
cmd = "k3d image import pdc/populate_db:1.0 -c pdc-cluster"


[feature.db.tasks.create-configmap]
cmd = """
kubectl create configmap config-dev \
  --from-literal=DB_HOST="supabase-supabase-db" \
  --from-literal=DB_PORT="5432" \
  --from-literal=SUPABASE_KONG_HOST="supabase-supabase-kong" \
  --from-literal=SUPABASE_KONG_PORT="8000"
"""

[feature.db.tasks.run-container-job]
cmd = """
kubectl apply -f deployment/kubernetes/populate_db_job.yaml && \
  sleep 10 && \
  kubectl get pods --selector=job-name=populate-db-job
"""

# ==== Backend environment ====
[feature.backend.tasks]
install-tools = { depends-on = ["install-k3d", "fetch-supabase-chart"] }
setup-infra = { depends-on = ["k3d-create-cluster", "setup-supabase"] }
setup-infra-cloud = { depends-on = ["k3d-create-cluster", "setup-supabase-cloud"] }
open-db-port = { depends-on = ["port-forward-supabase-db"] }

[feature.backend.dependencies]
curl = ">=8.8.0,<8.9"
kubernetes-helm = ">=3.15.3,<3.16"
kubernetes-client = ">=1.23.6,<1.31"

# Supabase tasks
[feature.backend.tasks.fetch-supabase-chart]
cmd = "git submodule update --init"

[feature.backend.tasks.setup-supabase]
cmd = [
    "helm",
    "upgrade",
    "supabase", 
    "vendors/supabase-kubernetes/charts/supabase",
    "--install",
    "--wait",
    "--cleanup-on-fail",
    "--values",
    "deployment/values.dev.yaml"
]
depends-on = ["fetch-supabase-chart"]

[feature.backend.tasks.decrypt-supabase-cloud-values]
cmd = "sops -d deployment/values.cloud.yaml > deployment/values.cloud.decrypted.yaml"

[feature.backend.tasks.setup-supabase-cloud]
cmd = [
    "helm",
    "upgrade",
    "supabase",
    "vendors/supabase-kubernetes/charts/supabase",
    "--install",
    "--wait",
    "--cleanup-on-fail",
    "--values",
    "deployment/values.cloud.decrypted.yaml"
]
depends-on = ["fetch-supabase-chart", "decrypt-supabase-cloud-values"]

[feature.backend.tasks.cleanup-decrypted-supabase-cloud-values]
cmd = "rm deployment/values.cloud.decrypted.yaml"

[feature.backend.tasks.port-forward-supabase-db]
cmd = "kubectl port-forward service/supabase-supabase-db 5432:5432"
depends-on = ["setup-supabase"]

# K3D Tasks
[feature.backend.tasks.install-k3d]
cmd = "curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash"
outputs = ["**/bin/k3d"]

[feature.backend.tasks.install-k3d.env]
K3D_INSTALL_DIR = "$CONDA_PREFIX/bin"
USE_SUDO = "false"

[feature.backend.tasks.k3d-create-cluster]
cmd = [
    "k3d",
    "cluster",
    "create",
    "pdc-cluster",
    "-p", "80:80@loadbalancer",
    "-p", "5432:5432@loadbalancer",
]
depends-on = ["install-k3d", "k3d-delete-cluster"]

[feature.backend.tasks.k3d-delete-cluster]
cmd = "k3d cluster delete pdc-cluster"

# Fast API tasks
[feature.backend.tasks.run-fast-api-server-run]
cmd = "fastapi run ./src/support_sphere_py/src/support_sphere/apis/main.py"

# Runs the Fast API server in editable mode - auto-triggers restart when source files are changed.
[feature.backend.tasks.fast-api-server-dev]
cmd = "fastapi dev ./src/support_sphere_py/src/support_sphere/apis/main.py"


# ==== Frontend environment ====
[feature.frontend.tasks]
install-tools = { depends-on = ["install-flutter"] }
setup-infra = { depends-on = ["check-android-licenses", "flutter-get"] }

[feature.frontend.dependencies]
python = ">=3.10"
ipykernel = ">=6.29.5,<6.30"
rich = ">=13.7.1,<13.8"
ruby = ">=3.3.3,<3.4"

# Flutter tasks
[feature.frontend.tasks.flutter-run]
cmd = "flutter run"
cwd = "src/support_sphere"
depends-on = ["flutter-devices", "flutter-get"]

[feature.frontend.tasks.flutter-get]
cmd = "flutter pub get"
cwd = "src/support_sphere"
depends-on = ["check-flutter"]

[feature.frontend.tasks.flutter-devices]
cmd = "flutter devices"
cwd = "src/support_sphere"
depends-on = ["check-flutter"]

[feature.frontend.tasks.install-flutter]
cmd = "python scripts/install-flutter.py"
outputs = [".app/flutter"]

[feature.frontend.tasks.check-flutter]
cmd = "flutter doctor"
depends-on = ["install-flutter"]

[feature.frontend.tasks.check-android-licenses]
cmd = "flutter doctor --android-licenses"
depends-on = ["install-flutter"]


# ==== Deployment environment ====
[feature.cloud.activation.env]
"TF_VAR_project_name" = "Support Sphere"
"TF_VAR_neighborhood" = "Laurelhurst"
"TF_VAR_stage" = "dev"
"TF_VAR_account_id" = "871683513797"
"TF_VAR_ops_group_name" = "ssec-eng"

[feature.cloud.tasks]
# empty for now

[feature.cloud.dependencies]
python = ">=3.10"
opentofu = ">=1.8.1"
boto3 = ">=1.35"
awscli = ">=2.4.0"
aws-session-manager-plugin = ">=1.2.0"

# OpenTofu tasks
[feature.cloud.tasks.cloud-deploy]
cmd = "tofu apply"
cwd = "deployment/cloud/aws/infrastructure"

[feature.cloud.tasks.cloud-init]
cmd = "tofu init"
cwd = "deployment/cloud/aws/infrastructure"

[feature.cloud.tasks.cloud-plan]
cmd = "tofu plan"
cwd = "deployment/cloud/aws/infrastructure"

[feature.cloud.tasks.cloud-destroy]
cmd = "tofu destroy"
cwd = "deployment/cloud/aws/infrastructure"

[feature.cloud.tasks.cloud-account-deploy]
cmd = "tofu apply"
cwd = "deployment/cloud/aws/account"
depends-on = ["cloud-account-setup"]

[feature.cloud.tasks.cloud-account-init]
cmd = "tofu init"
cwd = "deployment/cloud/aws/account"
depends-on = ["cloud-account-setup"]

[feature.cloud.tasks.cloud-account-plan]
cmd = "tofu plan"
cwd = "deployment/cloud/aws/account"
depends-on = ["cloud-account-setup"]

# server tasks
[feature.cloud.tasks.cloud-server-run]
cmd = "python scripts/run-cloud-server.py --scale-up"

[feature.cloud.tasks.cloud-server-stop]
cmd = "python scripts/run-cloud-server.py --scale-down"

[feature.cloud.tasks.cloud-server-replace]
cmd = "python scripts/run-cloud-server.py --replace"

[feature.cloud.tasks.cloud-server-access]
cmd = "scripts/access-cloud-server.sh"

[feature.cloud.tasks.edit-cloud-values]
cmd = "sops edit deployment/values.cloud.yaml"

[feature.cloud.tasks.cloud-account-setup]
cmd = "python scripts/cloud-account-setup.py"

[feature.cloud.tasks.cloud-account-user-controls]
cmd = "python scripts/aws-user-controls.py"

# ==== Backup Secret environment ====
[feature.backup-secret.dependencies]
gnupg = ">=2.4.5"

[feature.backup-secret.activation.env]
"GPG_TTY" = "$(tty)"

[feature.backup-secret.tasks.import-gpg-key]
cmd = "gpg --pinentry-mode loopback --output - keys.asc | gpg --import"